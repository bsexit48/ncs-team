/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface BlindBoxSellInterface extends utils.Interface {
  functions: {
    'blindbox()': FunctionFragment;
    'boxListing(uint256[],uint256[],uint256[],uint256[])': FunctionFragment;
    'boxes(uint256)': FunctionFragment;
    'currency()': FunctionFragment;
    'globalBuyLimit()': FunctionFragment;
    'onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)': FunctionFragment;
    'onERC1155Received(address,address,uint256,uint256,bytes)': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'purchase(uint256,uint256)': FunctionFragment;
    'purchasedPerBox(address,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setBlindbox(address)': FunctionFragment;
    'setCurrency(address)': FunctionFragment;
    'setGlobalBuyLimit(uint256)': FunctionFragment;
    'setStartSaleAt(uint256)': FunctionFragment;
    'startSaleAt()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'totalPurchasedBoxes(address)': FunctionFragment;
    'totalPurchasedPerBox(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'blindbox'
      | 'boxListing'
      | 'boxes'
      | 'currency'
      | 'globalBuyLimit'
      | 'onERC1155BatchReceived'
      | 'onERC1155Received'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'purchase'
      | 'purchasedPerBox'
      | 'renounceOwnership'
      | 'setBlindbox'
      | 'setCurrency'
      | 'setGlobalBuyLimit'
      | 'setStartSaleAt'
      | 'startSaleAt'
      | 'supportsInterface'
      | 'totalPurchasedBoxes'
      | 'totalPurchasedPerBox'
      | 'transferOwnership'
      | 'unpause',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'blindbox', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'boxListing',
    values: [BigNumberish[], BigNumberish[], BigNumberish[], BigNumberish[]],
  ): string;
  encodeFunctionData(functionFragment: 'boxes', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'currency', values?: undefined): string;
  encodeFunctionData(functionFragment: 'globalBuyLimit', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'onERC1155BatchReceived',
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'onERC1155Received',
    values: [string, string, BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'purchase', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'purchasedPerBox', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setBlindbox', values: [string]): string;
  encodeFunctionData(functionFragment: 'setCurrency', values: [string]): string;
  encodeFunctionData(functionFragment: 'setGlobalBuyLimit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setStartSaleAt', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'startSaleAt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'totalPurchasedBoxes', values: [string]): string;
  encodeFunctionData(functionFragment: 'totalPurchasedPerBox', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'blindbox', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'boxListing', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'boxes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currency', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'globalBuyLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onERC1155BatchReceived', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onERC1155Received', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchasedPerBox', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBlindbox', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCurrency', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGlobalBuyLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStartSaleAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startSaleAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalPurchasedBoxes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalPurchasedPerBox', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;

  events: {
    'BoxListing(uint256,uint256,uint256,uint256)': EventFragment;
    'ChangeBlindbox(address)': EventFragment;
    'ChangeCurrency(address)': EventFragment;
    'ChangeGlobalBuyLimit(uint256)': EventFragment;
    'ChangeStartSaleAt(uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'Purchase(address,uint256,uint256,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BoxListing'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ChangeBlindbox'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ChangeCurrency'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ChangeGlobalBuyLimit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ChangeStartSaleAt'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Purchase'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface BoxListingEventObject {
  _tokenId: BigNumber;
  _amount: BigNumber;
  _limit: BigNumber;
  _price: BigNumber;
}
export type BoxListingEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, BigNumber], BoxListingEventObject>;

export type BoxListingEventFilter = TypedEventFilter<BoxListingEvent>;

export interface ChangeBlindboxEventObject {
  _blindbox: string;
}
export type ChangeBlindboxEvent = TypedEvent<[string], ChangeBlindboxEventObject>;

export type ChangeBlindboxEventFilter = TypedEventFilter<ChangeBlindboxEvent>;

export interface ChangeCurrencyEventObject {
  _currency: string;
}
export type ChangeCurrencyEvent = TypedEvent<[string], ChangeCurrencyEventObject>;

export type ChangeCurrencyEventFilter = TypedEventFilter<ChangeCurrencyEvent>;

export interface ChangeGlobalBuyLimitEventObject {
  _globalBuyLimit: BigNumber;
}
export type ChangeGlobalBuyLimitEvent = TypedEvent<[BigNumber], ChangeGlobalBuyLimitEventObject>;

export type ChangeGlobalBuyLimitEventFilter = TypedEventFilter<ChangeGlobalBuyLimitEvent>;

export interface ChangeStartSaleAtEventObject {
  _startSaleAt: BigNumber;
}
export type ChangeStartSaleAtEvent = TypedEvent<[BigNumber], ChangeStartSaleAtEventObject>;

export type ChangeStartSaleAtEventFilter = TypedEventFilter<ChangeStartSaleAtEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PurchaseEventObject {
  _address: string;
  _boxType: BigNumber;
  _amount: BigNumber;
  _purchasedAt: BigNumber;
}
export type PurchaseEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], PurchaseEventObject>;

export type PurchaseEventFilter = TypedEventFilter<PurchaseEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface BlindBoxSell extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlindBoxSellInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blindbox(overrides?: CallOverrides): Promise<[string]>;

    boxListing(
      _tokenIds: BigNumberish[],
      _prices: BigNumberish[],
      _amounts: BigNumberish[],
      _limits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    boxes(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        limit: BigNumber;
        price: BigNumber;
      }
    >;

    currency(overrides?: CallOverrides): Promise<[string]>;

    globalBuyLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    purchase(
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    purchasedPerBox(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBlindbox(
      _blindbox: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setCurrency(
      _currency: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setGlobalBuyLimit(
      _globalBuyLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setStartSaleAt(
      _startSaleAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    startSaleAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    totalPurchasedBoxes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPurchasedPerBox(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  blindbox(overrides?: CallOverrides): Promise<string>;

  boxListing(
    _tokenIds: BigNumberish[],
    _prices: BigNumberish[],
    _amounts: BigNumberish[],
    _limits: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  boxes(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      limit: BigNumber;
      price: BigNumber;
    }
  >;

  currency(overrides?: CallOverrides): Promise<string>;

  globalBuyLimit(overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  purchase(
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  purchasedPerBox(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBlindbox(
    _blindbox: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setCurrency(
    _currency: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setGlobalBuyLimit(
    _globalBuyLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setStartSaleAt(
    _startSaleAt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  startSaleAt(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  totalPurchasedBoxes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalPurchasedPerBox(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    blindbox(overrides?: CallOverrides): Promise<string>;

    boxListing(
      _tokenIds: BigNumberish[],
      _prices: BigNumberish[],
      _amounts: BigNumberish[],
      _limits: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    boxes(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        limit: BigNumber;
        price: BigNumber;
      }
    >;

    currency(overrides?: CallOverrides): Promise<string>;

    globalBuyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    purchase(_tokenId: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    purchasedPerBox(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBlindbox(_blindbox: string, overrides?: CallOverrides): Promise<void>;

    setCurrency(_currency: string, overrides?: CallOverrides): Promise<void>;

    setGlobalBuyLimit(_globalBuyLimit: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setStartSaleAt(_startSaleAt: BigNumberish, overrides?: CallOverrides): Promise<void>;

    startSaleAt(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    totalPurchasedBoxes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalPurchasedPerBox(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'BoxListing(uint256,uint256,uint256,uint256)'(
      _tokenId?: null,
      _amount?: null,
      _limit?: null,
      _price?: null,
    ): BoxListingEventFilter;
    BoxListing(_tokenId?: null, _amount?: null, _limit?: null, _price?: null): BoxListingEventFilter;

    'ChangeBlindbox(address)'(_blindbox?: null): ChangeBlindboxEventFilter;
    ChangeBlindbox(_blindbox?: null): ChangeBlindboxEventFilter;

    'ChangeCurrency(address)'(_currency?: null): ChangeCurrencyEventFilter;
    ChangeCurrency(_currency?: null): ChangeCurrencyEventFilter;

    'ChangeGlobalBuyLimit(uint256)'(_globalBuyLimit?: null): ChangeGlobalBuyLimitEventFilter;
    ChangeGlobalBuyLimit(_globalBuyLimit?: null): ChangeGlobalBuyLimitEventFilter;

    'ChangeStartSaleAt(uint256)'(_startSaleAt?: null): ChangeStartSaleAtEventFilter;
    ChangeStartSaleAt(_startSaleAt?: null): ChangeStartSaleAtEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Purchase(address,uint256,uint256,uint256)'(
      _address?: null,
      _boxType?: null,
      _amount?: null,
      _purchasedAt?: null,
    ): PurchaseEventFilter;
    Purchase(_address?: null, _boxType?: null, _amount?: null, _purchasedAt?: null): PurchaseEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    blindbox(overrides?: CallOverrides): Promise<BigNumber>;

    boxListing(
      _tokenIds: BigNumberish[],
      _prices: BigNumberish[],
      _amounts: BigNumberish[],
      _limits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    boxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    currency(overrides?: CallOverrides): Promise<BigNumber>;

    globalBuyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    purchasedPerBox(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setBlindbox(
      _blindbox: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setCurrency(
      _currency: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setGlobalBuyLimit(
      _globalBuyLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setStartSaleAt(
      _startSaleAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    startSaleAt(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    totalPurchasedBoxes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalPurchasedPerBox(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    blindbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boxListing(
      _tokenIds: BigNumberish[],
      _prices: BigNumberish[],
      _amounts: BigNumberish[],
      _limits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    boxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalBuyLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchase(
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    purchasedPerBox(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBlindbox(
      _blindbox: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setCurrency(
      _currency: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setGlobalBuyLimit(
      _globalBuyLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setStartSaleAt(
      _startSaleAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    startSaleAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPurchasedBoxes(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPurchasedPerBox(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}
